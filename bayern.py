# -*- coding: utf-8 -*-
"""bayern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/165aVfn-N1j0fmPmtLHBfAAEz922u6vbV
"""

!pip install mplsoccer statsbombpy seaborn

from statsbombpy import sb
import pandas as pd
from mplsoccer import VerticalPitch,Pitch
import matplotlib.pyplot as plt
from mplsoccer import Pitch

sb.competitions()

partidas = sb.matches(competition_id=9, season_id=281)

partidas

partidas_bayer = partidas.loc[(partidas['home_team'] == 'Bayer Leverkusen') | (partidas['away_team'] == 'Bayer Leverkusen')]

partidas_bayer = partidas_bayer[['match_id','match_week', 'home_team', 'away_team', 'stadium']].sort_values(by='match_id', ascending=True)

partidas_bayer

partidas_id = partidas_bayer['match_id'].tolist()

partidas_id

for match_id in partidas_id:
    events = sb.events(match_id)

    #print(events)

    #Gols
    gols_bayer = events[(events['type'] == 'Shot') & (events['shot_outcome'] == 'Goal') & (events['team'] == 'Bayer Leverkusen')]
    gols_adversario = events[(events['type'] == 'Shot') & (events['shot_outcome'] == 'Goal') & (events['team'] != 'Bayer Leverkusen')]

    #Posse de Bola
    eventos_bayer = events[events['team'] == 'Bayer Leverkusen']
    eventos_adversario = events[events['team'] != 'Bayer Leverkusen']

    # divididas = eventos_bayer[eventos_bayer['type'] == '50/50']
    # display(divididas)

    posse_bayer = len(eventos_bayer)
    posse_adversario = len(eventos_adversario)
    eventos_totais = posse_bayer + posse_adversario

    posse_real_bayer = ((posse_bayer / eventos_totais) * 100) #%
    posse_real_adversario = ((posse_adversario / eventos_totais) * 100) #%

    #Passes
    passes = (events[(events['type'] == 'Pass')])

    passes_bayer = int((len(passes) * (int(round(posse_real_bayer,0)) / 100)))

    #Chutes
    chutes_bayer = (events[(events['type'] == 'Shot') & (events['team'] == 'Bayer Leverkusen')])
    chutes_adversario = (events[(events['type'] == 'Shot') & (events['team'] != 'Bayer Leverkusen')])

    total_chutes_bayer = len(chutes_bayer)

    chutes_a_gol_bayer = chutes_bayer[(chutes_bayer['shot_outcome'] == 'Goal') | (chutes_bayer['shot_outcome'] == 'Saved')]
    total_a_gol_bayer = len(chutes_a_gol_bayer)

    precisao_chutes = ((total_a_gol_bayer / total_chutes_bayer)) #%

    xG = chutes_bayer[chutes_bayer['type'] == 'Shot']['shot_statsbomb_xg'].sum()

    #Stats Defensivos
    xGA = chutes_adversario[chutes_adversario['type'] == 'Shot']['shot_statsbomb_xg'].sum()
    pressoes_ofensivas = eventos_bayer[eventos_bayer['type'] == 'Pressure']
    interceptacoes = eventos_bayer[(eventos_bayer['interception_outcome'] == 'Success') | (eventos_bayer['interception_outcome'] == 'Success In Play') | (eventos_bayer['interception_outcome'] == 'Won')]
    duelos = eventos_bayer[eventos_bayer['type'] == 'Duel']
    duelos_ganhos = duelos[(duelos['duel_outcome'] == 'Success In Play') | (duelos['duel_outcome'] == 'Won') | (duelos['duel_outcome'] == 'Success')]
    desarmes_bayer = eventos_bayer[eventos_bayer['duel_type'] == 'Tackle']
    desarmes_completos = eventos_bayer[(eventos_bayer['duel_outcome'] == 'Success In Play') | (eventos_bayer['duel_outcome'] == 'Won') | (eventos_bayer['duel_outcome'] == 'Success')]

    #Divididas
    if '50_50' in events.columns:
      divididas = eventos_bayer[eventos_bayer['type'] == '50/50']

      divididas_sem_nan = divididas.dropna(subset=['50_50'])

      divididas_ganhas = divididas['50_50'].apply(
        lambda x: x['outcome']['name'] in ['Won', 'Success to Team'] if pd.notnull(x) and 'outcome' in x else False
      )

      divididas_filtradas = divididas_sem_nan[divididas_ganhas]

      qtd_divididas = len(divididas)
      qtd_divididas_ganhas = len(divididas_filtradas)
      aproveitamento_divididas = ((qtd_divididas_ganhas / qtd_divididas)) #%


    qtd_duelos = len(duelos)
    qtd_duelos_ganhos = len(duelos_ganhos)
    qtd_interceptacoes = len(interceptacoes)
    qtd_pressoes_ofensivas = len(pressoes_ofensivas)
    qtd_desarmes_completos = len(desarmes_completos)
    aproveitamento_duelos = ((qtd_duelos_ganhos / qtd_duelos))#%

    #Erros Individuais
    erros = eventos_bayer[eventos_bayer['type'] == 'Error']
    qtd_erros = len(erros)

    #Faltas
    faltas_cometidas = (events[(events['type'] == 'Foul Committed') & (events['team'] == 'Bayer Leverkusen')])
    faltas_sofridas = (events[(events['type'] == 'Foul Committed') & (events['team'] != 'Bayer Leverkusen')])

    qtd_faltas_cometidas = len(faltas_cometidas)
    qtd_faltas_sofridas = len(faltas_sofridas)

    #CartÃµes
    qtd_cartoes_amarelos_por_falta = 0
    qtd_cartoes_2_amarelos_por_falta = 0
    qtd_cartoes_vermelhos_por_falta = 0

    if 'bad_behaviour_card' in events.columns:
      cartoes_amarelos = events[(events['bad_behaviour_card'] == 'Yellow Card') & (events['team'] == 'Bayer Leverkusen')]
      qtd_cartoes_amarelos = len(cartoes_amarelos)

    if 'foul_committed_card' in events.columns:
      cartoes_amarelos_por_falta = (events[(events['type'] == 'Foul Committed') & (events['team'] == 'Bayer Leverkusen') & (events['foul_committed_card'] == 'Yellow Card')])
      cartoes_2_amarelos_por_falta = (events[(events['type'] == 'Foul Committed') & (events['team'] == 'Bayer Leverkusen') & (events['foul_committed_card'] == 'Second Yellow')])
      cartoes_vermelhos_por_falta = (events[(events['type'] == 'Foul Committed') & (events['team'] == 'Bayer Leverkusen') & (events['foul_committed_card'] == 'Red Card')])

      qtd_cartoes_amarelos_por_falta = len(cartoes_amarelos_por_falta)
      qtd_cartoes_2_amarelos_por_falta = len(cartoes_2_amarelos_por_falta)
      qtd_cartoes_vermelhos_por_falta = len(cartoes_vermelhos_por_falta)


    #Ataque
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'gols_pro'] = str(len(gols_bayer))
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'gols_contra'] = str(len(gols_adversario))
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'posse_bayer'] = round(posse_real_bayer,0)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'posse_adversario'] = round(posse_real_adversario,0)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'passes'] = str(passes_bayer)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'chutes'] = str(total_chutes_bayer)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'chutes_a_gol'] = str(total_a_gol_bayer)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'precisao_chute(%)'] = round(precisao_chutes,2)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'xG'] = round(xG,2)

    #Defesa
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'xGA'] = round(xGA,2)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'pressoes_ofensivas'] = str(qtd_pressoes_ofensivas)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'interceptacoes'] = str(qtd_interceptacoes)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'desarmes'] = str(qtd_desarmes_completos)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'duelos'] = str(qtd_duelos)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'duelos_ganhos'] = str(qtd_duelos_ganhos)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'aproveitamento_duelos'] = round(aproveitamento_duelos,2)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'divididas'] = str(qtd_divididas)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'divididas_ganhas'] = str(qtd_divididas_ganhas)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'aproveitamento_divididas'] = round(aproveitamento_divididas,2)

    #Outros
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'erros_individuais'] = str(qtd_erros)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'faltas_sofridas'] = str(qtd_faltas_sofridas)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'faltas_cometidas'] = str(qtd_faltas_cometidas)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'cartoes_amarelos_por_falta'] = str(qtd_cartoes_amarelos_por_falta)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'cartoes_amarelos_por_reclamacao'] = str(qtd_cartoes_amarelos)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'total_cartoes_amarelos'] = str(qtd_cartoes_amarelos + qtd_cartoes_amarelos_por_falta)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'cartoes_2_amarelos'] = str(qtd_cartoes_2_amarelos_por_falta)
    partidas_bayer.loc[partidas_bayer['match_id'] == match_id, 'cartoes_vermelhos'] = str(qtd_cartoes_vermelhos_por_falta)

    #Resultado
    partidas_bayer['resultado'] = 'Derrota'
    partidas_bayer.loc[partidas_bayer['gols_pro'] > partidas_bayer['gols_contra'], 'resultado'] = 'Vitoria'
    partidas_bayer.loc[partidas_bayer['gols_pro'] == partidas_bayer['gols_contra'], 'resultado'] = 'Empate'

    #Pontos
    partidas_bayer['pontos'] = 0
    partidas_bayer.loc[partidas_bayer['resultado'] == 'Vitoria', 'pontos'] = 3
    partidas_bayer.loc[partidas_bayer['resultado'] == 'Empate', 'pontos'] = 1

partidas_bayer

partidas_bayer.to_excel('partidas_bayer.xlsx', index=False)

tabelas_eventos = []

# Iterar sobre cada partida
for match_id in partidas_id:
    events = sb.events(match_id)

    bayer_events = events[events['team'] == 'Bayer Leverkusen']

    #Ataque
    bayer_events['gol'] = (bayer_events['type'] == 'Shot') & (bayer_events['shot_outcome'] == 'Goal')
    bayer_events['gol_90+'] = (bayer_events['type'] == 'Shot') & (bayer_events['shot_outcome'] == 'Goal') & (bayer_events['minute'] >= 90)
    bayer_events['chutes'] = (bayer_events['type'] == 'Shot') & (bayer_events['team'] == 'Bayer Leverkusen')
    bayer_events['chutes_a_gol'] = (bayer_events['shot_outcome'] == 'Goal') | (bayer_events['shot_outcome'] == 'Saved')
    bayer_events['xG'] = bayer_events['shot_statsbomb_xg'].fillna(0)

    #Passes
    if 'pass_goal_assist' in events.columns:
      bayer_events['assistencias'] = (bayer_events['type'] == 'Pass') & (bayer_events['pass_goal_assist'] == 1)
    else:
      bayer_events['assistencias'] = 0

    bayer_events['passes_decisivos'] = (bayer_events['type'] == 'Pass') & (bayer_events['pass_shot_assist'] == 1)


    #Defesa
    bayer_events['interceptacoes'] = (bayer_events['interception_outcome'] == 'Success') | (bayer_events['interception_outcome'] == 'Success In Play') | (bayer_events['interception_outcome'] == 'Won')
    bayer_events['duelos'] = bayer_events['type'] == 'Duel'
    bayer_events['duelos_ganhos'] = (bayer_events['duel_outcome'] == 'Success In Play') | (bayer_events['duel_outcome'] == 'Won') | (bayer_events['duel_outcome'] == 'Success')
    bayer_events['desarmes'] = bayer_events['duel_type'] == 'Tackle'
    bayer_events['desarmes_completos'] = (bayer_events['duel_outcome'] == 'Success In Play') | (bayer_events['duel_outcome'] == 'Won') | (bayer_events['duel_outcome'] == 'Success')

    #Faltas
    bayer_events['faltas_cometidas'] = (bayer_events['type'] == 'Foul Committed') & (bayer_events['team'] == 'Bayer Leverkusen')
    bayer_events['faltas_sofridas'] = (bayer_events['type'] == 'Foul Won') & (bayer_events['team'] == 'Bayer Leverkusen')

    #CartÃµes
    if 'bad_behaviour_card' in events.columns:
      bayer_events['cartoes_amarelos_reclamacao'] = (bayer_events['bad_behaviour_card'] == 'Yellow Card') & (bayer_events['team'] == 'Bayer Leverkusen')
    else:
      bayer_events['cartoes_amarelos_reclamacao'] = 0

    if 'foul_committed_card' in events.columns:
      bayer_events['cartoes_amarelos_falta'] = (bayer_events['type'] == 'Foul Committed') & (bayer_events['team'] == 'Bayer Leverkusen') & (bayer_events['foul_committed_card'] == 'Yellow Card')
      bayer_events['cartoes_2_amarelos_falta'] = (bayer_events['type'] == 'Foul Committed') & (bayer_events['team'] == 'Bayer Leverkusen') & (bayer_events['foul_committed_card'] == 'Second Yellow')
      bayer_events['cartoes_vermelhos_falta'] = (bayer_events['type'] == 'Foul Committed') & (bayer_events['team'] == 'Bayer Leverkusen') & (bayer_events['foul_committed_card'] == 'Red Card')
    else:
      bayer_events['cartoes_amarelos_falta'] = 0
      bayer_events['cartoes_2_amarelos_falta'] = 0
      bayer_events['cartoes_vermelhos_falta'] = 0

    #Erros Individuais
    bayer_events['erros'] = bayer_events['type'] == 'Error'


    # Adicionar a tabela de eventos do jogo atual Ã  lista
    tabelas_eventos.append(bayer_events[['match_id', 'player_id', 'player', 'gol', 'gol_90+', 'chutes','chutes_a_gol', 'xG', 'passes_decisivos','assistencias', 'interceptacoes',
                                         'duelos', 'duelos_ganhos','desarmes','desarmes_completos', 'faltas_cometidas', 'faltas_sofridas',
                                         'cartoes_amarelos_reclamacao', 'cartoes_amarelos_falta', 'cartoes_2_amarelos_falta', 'cartoes_vermelhos_falta',  'erros']])

# Concatenar todas as tabelas de eventos em uma Ãºnica tabela
tabela_final_eventos = pd.concat(tabelas_eventos, ignore_index=True)


#'match_id',

# Agrupar as estatÃ­sticas por jogador
estatisticas_jogadores = tabela_final_eventos.groupby(['player', 'player_id']).agg(
    total_gols=('gol', 'sum'),
    total_gol_90=('gol_90+', 'sum'),
    total_chutes=('chutes', 'sum'),
    total_chutes_a_gol=('chutes_a_gol', 'sum'),
    total_xg=('xG', 'sum'),
    total_assistencias=('assistencias', 'sum'),
    total_passes_decisivos=('passes_decisivos', 'sum'),
    total_interceptacoes=('interceptacoes', 'sum'),
    total_duelos=('duelos', 'sum'),
    total_duelos_ganhos=('duelos_ganhos', 'sum'),
    total_desarmes=('desarmes', 'sum'),
    total_desarmes_completos=('desarmes_completos', 'sum'),
    total_faltas_cometidas=('faltas_cometidas', 'sum'),
    total_faltas_sofridas=('faltas_sofridas', 'sum'),
    total_cartoes_amarelos_reclamacao=('cartoes_amarelos_reclamacao', 'sum'),
    total_cartoes_amarelos_falta=('cartoes_amarelos_falta', 'sum'),
    total_cartoes_2_amarelos_falta=('cartoes_2_amarelos_falta', 'sum'),
    total_cartoes_vermelhos_falta=('cartoes_vermelhos_falta', 'sum'),
    total_erros=('erros', 'sum'),

).reset_index()

# Agrupar as estatÃ­sticas por jogador por partida
estatisticas_jogadores_por_partida = tabela_final_eventos.groupby(['match_id','player', 'player_id']).agg(
    total_gols=('gol', 'sum'),
    total_gol_90=('gol_90+', 'sum'),
    total_chutes=('chutes', 'sum'),
    total_chutes_a_gol=('chutes_a_gol', 'sum'),
    total_xg=('xG', 'sum'),
    total_assistencias=('assistencias', 'sum'),
    total_passes_decisivos=('passes_decisivos', 'sum'),
    total_interceptacoes=('interceptacoes', 'sum'),
    total_duelos=('duelos', 'sum'),
    total_duelos_ganhos=('duelos_ganhos', 'sum'),
    total_desarmes=('desarmes', 'sum'),
    total_desarmes_completos=('desarmes_completos', 'sum'),
    total_faltas_cometidas=('faltas_cometidas', 'sum'),
    total_faltas_sofridas=('faltas_sofridas', 'sum'),
    total_cartoes_amarelos_reclamacao=('cartoes_amarelos_reclamacao', 'sum'),
    total_cartoes_amarelos_falta=('cartoes_amarelos_falta', 'sum'),
    total_cartoes_2_amarelos_falta=('cartoes_2_amarelos_falta', 'sum'),
    total_cartoes_vermelhos_falta=('cartoes_vermelhos_falta', 'sum'),
    total_erros=('erros', 'sum'),

).reset_index()

estatisticas_jogadores
estatisticas_jogadores_por_partida



estatisticas_jogadores.to_excel('estatisticas_jogadores.xlsx', index=False)
estatisticas_jogadores_por_partida.to_excel('estatisticas_jogadores_por_partida.xlsx', index=False)